// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  phoneNumber   String    @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  firstName     String?
  lastName      String?
  password      String?
  role          UserType  @default(STAFF)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  address       String?
  position      String?
  company       String?
  city          String?
  country       String?
  province      String?
  postalAdd     String?
  isActive      Boolean?
  avatar        String?

  // Relations

  sessions Session[]
<<<<<<< HEAD
  pos      Pos[]
=======
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Guest {
<<<<<<< HEAD
  id                 String        @id @default(uuid())
  firstName          String
  lastName           String
  email              String        @unique
=======
  id                 String   @id @default(uuid())
  firstName          String
  lastName           String
  email              String   @unique
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f
  phoneNumber        String?
  idNo               String?
  company            String?
  city               String?
  country            String?
  province           String?
  address            String?
  signature          String?
<<<<<<< HEAD
  purpose_tourist    Boolean?      @default(false)
  purpose_conference Boolean?      @default(false)
  purpose_group      Boolean?      @default(false)
  purpose_business   Boolean?      @default(false)
  payment            PaymentMethod @default(CASH)

=======
  purpose_tourist    Boolean? @default(false)
  purpose_conference Boolean? @default(false)
  purpose_group      Boolean? @default(false)
  purpose_business   Boolean? @default(false)
  payment            PaymentMethod  @default(CASH)
  
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f
  createdAt DateTime @default(now())

  reservations Reservation[]
  billing      Billing[]
<<<<<<< HEAD
  Pos          Pos[]
=======
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f
}

enum PaymentMethod {
  CASH
  COMPANY
  CARD
<<<<<<< HEAD
}
=======
} 
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f

model Reservation {
  id            String            @id @default(uuid())
  guestId       String
<<<<<<< HEAD
  roomId        String
=======
  guest         Guest             @relation(fields: [guestId], references: [id])
  roomId        String
  room          Room              @relation(fields: [roomId], references: [id])
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f
  checkInDate   DateTime
  checkOutDate  DateTime
  adults        String?
  children      String?
  extraBed      Boolean?
  bookedBy      String?
  receiptionist String?
  dutyManager   String?
  status        ReservationStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  Billing       Billing[]
<<<<<<< HEAD

  room  Room  @relation(fields: [roomId], references: [id])
  guest Guest @relation(fields: [guestId], references: [id])
=======
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f
}

model Room {
  id            String        @id @default(uuid())
  number        String        @unique
  type          RoomType
  pricePerNight Float?
  status        RoomStatus    @default(AVAILABLE)
  reservations  Reservation[]
}

model Billing {
  id            String      @id @default(uuid())
  guestId       String
<<<<<<< HEAD
  reservationId String
  amount        Float
  paid          Boolean     @default(false)
  createdAt     DateTime    @default(now())
  
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  guest         Guest       @relation(fields: [guestId], references: [id])
}

model Pos {
  id              String   @id @default(uuid())
  guestId         String
  userId          Int
  itemName        String
  itemDescription String
  photo           String?
  amount          Float
  createdAt       DateTime @default(now())
  guest           Guest    @relation(fields: [guestId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
=======
  guest         Guest       @relation(fields: [guestId], references: [id])
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  amount        Float
  createdAt     DateTime    @default(now())
  paid          Boolean     @default(false)
>>>>>>> 9caa6e2523b37c39dbada7f3aa7fdcd1ee386a6f
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum RoomType {
  STANDARD
  A_FRAMES
  FLOATING
  EXECUTIVE
}

enum UserType {
  STAFF
  ADMIN
}
